<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Laravel Passport Configuration
    |--------------------------------------------------------------------------
    |
    | Here you may configure your Laravel Passport settings for OAuth2
    | authentication using HTTP-only cookies for enhanced security.
    |
    */

    /*
    |--------------------------------------------------------------------------
    | Passport Database Connection
    |--------------------------------------------------------------------------
    |
    | This database connection will be used to store Passport's database
    | tables, which hold the various access and refresh tokens, as well
    | as the OAuth2 clients. You can set this to any connection name.
    |
    */

    'connection' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Client UUIDs
    |--------------------------------------------------------------------------
    |
    | By default, Passport uses auto-incrementing primary keys for clients.
    | If you want to use UUIDs instead, set this to true. This may be useful
    | for ensuring clients have unpredictable identifiers.
    |
    */

    'client_uuids' => false,

    /*
    |--------------------------------------------------------------------------
    | Personal Access Client
    |--------------------------------------------------------------------------
    |
    | If you enable this, Laravel Passport will automatically create a
    | personal access client that can be used to generate personal access
    | tokens, which are useful for testing or simple authentication setups.
    |
    */

    'personal_access_client' => [
        'id' => env('PASSPORT_PERSONAL_ACCESS_CLIENT_ID'),
        'secret' => env('PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Passport Storage Driver
    |--------------------------------------------------------------------------
    |
    | This configuration controls the storage driver that will be used to
    | store access tokens, refresh tokens, and authorization codes that are
    | generated by your application. Supported: "database", "cookie"
    |
    */

    'storage' => [
        'database' => [
            'connection' => env('DB_CONNECTION', 'mysql'),
        ],
    ],

];
